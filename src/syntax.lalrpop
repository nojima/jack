use compact_str::CompactString;
use crate::ast::{Expr, UnaryOp, BinaryOp, TypeExpr};
use crate::lexer;
use crate::token::Token;
use std::rc::Rc;

grammar;

//-----------------------------------------------------------------------------

CommaSeparated<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

//-----------------------------------------------------------------------------

pub Expr: Expr =  {
    OrExpr,
    IfExpr,
    LocalExpr,
    Function,
};

IfExpr: Expr =
    "if" <cond:Expr> "then" <then:Expr> "else" <else_:Expr>
        => Expr::If(Box::new(cond), Box::new(then), Box::new(else_));

LocalExpr: Expr = {
    "local" <name:Identifier> "=" <expr1:Expr> ";" <expr2:Expr>
        => Expr::Local(name.into(), Box::new(expr1), Box::new(expr2)),
    "local" <name:Identifier> <type_params:TypeParams?> <params:FunctionParams> "=" <expr1:Expr> ";" <expr2:Expr>
        => {
            // Desuger: local <name>(<params>) = <expr1>; <expr2>
            //       => local <name> = function(<params>) <expr1>; <expr2>
            let type_params = type_params.unwrap_or(vec![]);
            let type_params = type_params.into_iter().map(|s| s.into()).collect();
            let params = params.into_iter().map(|(k, v)| (k.into(), v)).collect();
            let func = Expr::Function(type_params, params, Box::new(expr1));
            Expr::Local(name.into(), Box::new(func), Box::new(expr2))
        },
};

OrExpr: Expr = {
    AndExpr,
    <lhs:OrExpr> "||" <rhs:AndExpr>
        => Expr::BinaryOp(BinaryOp::Or, Box::new(lhs), Box::new(rhs)),
}

AndExpr: Expr = {
    CompExpr,
    <lhs:AndExpr> "&&" <rhs:CompExpr>
        => Expr::BinaryOp(BinaryOp::And, Box::new(lhs), Box::new(rhs)),
}

CompExpr: Expr = {
    AddExpr,
    <lhs:AddExpr> <op:CompOp> <rhs:AddExpr>
        => Expr::BinaryOp(op, Box::new(lhs), Box::new(rhs)),
}

CompOp: BinaryOp = {
    "==" => BinaryOp::Eq,
    "!=" => BinaryOp::NotEq,
};

AddExpr: Expr = {
    MulExpr,
    <lhs:AddExpr> <op:AddOp> <rhs:MulExpr>
        => Expr::BinaryOp(op, Box::new(lhs), Box::new(rhs)),
};

AddOp: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub,
};

MulExpr: Expr = {
    PrefixExpr,
    <lhs:MulExpr> <op:MulOp> <rhs:PrefixExpr>
        => Expr::BinaryOp(op, Box::new(lhs), Box::new(rhs)),
};

MulOp: BinaryOp = {
    "*" => BinaryOp::Mul,
    "/" => BinaryOp::Div,
    "%" => BinaryOp::Mod,
};

PrefixExpr: Expr = {
    PostfixExpr,
    <op:PrefixOp> <expr:PostfixExpr> => Expr::UnaryOp(op, Box::new(expr)),
};

PrefixOp: UnaryOp = {
    "-" => UnaryOp::Neg,
    "!" => UnaryOp::Not,
};

PostfixExpr: Expr = {
    Term,
    FunctionCall,
    FieldAccess,
    IndexAccess,
};

FunctionCall: Expr =
    <func:PostfixExpr> "(" <args:CommaSeparated<Expr>> ")"
        => Expr::FunctionCall(Box::new(func), args);

FieldAccess: Expr =
    <expr:PostfixExpr> "." <name:Identifier>
        => Expr::FieldAccess(Box::new(expr), name.into());

IndexAccess: Expr =
    <expr:PostfixExpr> "[" <index:Expr> "]"
        => Expr::IndexAccess(Box::new(expr), Box::new(index));

Term: Expr = {
    Literal,
    Variable,
    "(" <Expr> ")",
};

Variable: Expr =
    Identifier => Expr::Variable(<>.into());

Literal: Expr = {
    "true"  => Expr::Bool(true),
    "false" => Expr::Bool(false),
    "null"  => Expr::Null,
    Number  => Expr::Number(<>),
    String  => Expr::String(Rc::new(<>)),
    Array   => Expr::Array(<>),
    Dict    => Expr::Dict(<>),
};

Number: f64 = "number literal";

String: String = "string literal";

Identifier: CompactString = "identifier";

Array: Vec<Expr> =
    "[" <CommaSeparated<Expr>> "]";

Dict: Vec<(CompactString, Expr)> =
    "{" <CommaSeparated<DictKeyValue>> "}";

DictKeyValue: (CompactString, Expr) = {
    <k:Key> ":" <v:Expr> => (k.into(), v),
    <name:Identifier> <type_params:TypeParams?> <params:FunctionParams> ":" <expr:Expr> => {
        // Desuger: <name>(<params>): <expr>
        //       => <name>: function(<params>) <expr>
        let type_params = type_params.unwrap_or(vec![]);
        let type_params = type_params.into_iter().map(|s| s.into()).collect();
        let params = params.into_iter().map(|(k, v)| (k.into(), v)).collect();
        let func = Expr::Function(type_params, params, Box::new(expr));
        (name.into(), func)
    },
};

Key: CompactString = {
    String => <>.into(),
    Identifier,
};

Function: Expr =
    "function" <type_params:TypeParams?> <params:FunctionParams> <expr:Expr> => {
        let type_params = type_params.unwrap_or(vec![]);
        let type_params = type_params.into_iter().map(|s| s.into()).collect();
        let params = params.into_iter().map(|(k, v)| (k.into(), v)).collect();
        Expr::Function(type_params, params, Box::new(expr))
    };

FunctionParams: Vec<(CompactString, TypeExpr)> =
    "(" <CommaSeparated<FunctionParam>> ")";

FunctionParam: (CompactString, TypeExpr) =
    <name:Identifier> ":" <type_expr:TypeExpr>
        => (name, type_expr);

TypeExpr: TypeExpr = {
    <name:Identifier> "[" <params:CommaSeparated<TypeExpr>> "]"
        => TypeExpr::Constructor(name, params),
    Identifier
        => TypeExpr::Simple(<>),
};

TypeParams: Vec<CompactString> =
    "[" <CommaSeparated<Identifier>> "]";
 
extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum Token {
        "true"  => Token::True,
        "false" => Token::False,
        "null"  => Token::Null,

        "if" => Token::If,
        "then" => Token::Then,
        "else" => Token::Else,
        "local" => Token::Local,
        "function" => Token::Function,

        "number literal" => Token::Number(<f64>),
        "string literal" => Token::String(<String>),
        "identifier"     => Token::Identifier(<CompactString>),

        "." => Token::Dot,
        ":" => Token::Colon,
        ";" => Token::Semicolon,
        "," => Token::Comma,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Asterisk,
        "/" => Token::Slash,
        "%" => Token::Percent,
        "=" => Token::Eq,
        "==" => Token::EqEq,
        "!" => Token::Exclamation,
        "!=" => Token::NotEq,
        "&" => Token::Ampersand,
        "&&" => Token::AndAnd,
        "|" => Token::Pipe,
        "||" => Token::OrOr,
    }
}
