use std::str::FromStr;
use std::collections::HashMap;
use crate::ast::Expr;

grammar;

pub Expr: Expr = {
    "true"  => Expr::Bool(true),
    "false" => Expr::Bool(false),
    "null"  => Expr::Null,
    Number  => Expr::Number(<>),
    Array   => Expr::Array(<>),
    Dict    => Expr::Dict(<>),
};

CommaSeparated<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Array: Vec<Expr> =
    "[" <CommaSeparated<Expr>> "]";

Dict: HashMap<String, Expr> =
    "{" <CommaSeparated<KeyValue>> "}" =>
        <>.into_iter().collect();

KeyValue: (String, Expr) =
    <k:Identifier> ":" <v:Expr> => (k, v);

Identifier: String =
    r"[a-zA-Z_][a-zA-Z0-9_]*" => <>.to_owned();

Number: f64 =
    r"-?(0|[1-9][0-9]*)([.][0-9]+|)([eE][-+]?[0-9]+|)" =>
        f64::from_str(<>).unwrap();
