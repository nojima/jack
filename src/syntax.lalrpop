use std::collections::HashMap;
use crate::ast::Expr;
use crate::lexer;
use crate::token;

grammar;

pub Expr: Expr = {
    "true"  => Expr::Bool(true),
    "false" => Expr::Bool(false),
    "null"  => Expr::Null,
    Number  => Expr::Number(<>),
    Array   => Expr::Array(<>),
    Dict    => Expr::Dict(<>),
};

Number: f64 = "number literal";

CommaSeparated<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Array: Vec<Expr> =
    "[" <CommaSeparated<Expr>> "]";

Dict: HashMap<String, Expr> =
    "{" <CommaSeparated<KeyValue>> "}" =>
        <>.into_iter().collect();

KeyValue: (String, Expr) =
    <k:Identifier> ":" <v:Expr> => (k, v);

Identifier: String = "identifier";
 
extern {
    type Location = lexer::Pos;
    type Error = lexer::LexicalError;

    enum token::Token {
        "true"  => token::Token::True,
        "false" => token::Token::False,
        "null"  => token::Token::Null,

        "number literal" => token::Token::Number(<f64>),
        "string literal" => token::Token::Str(<String>),
        "identifier"     => token::Token::Identifier(<String>),

        ":" => token::Token::Colon,
        "," => token::Token::Comma,
        "[" => token::Token::LBracket,
        "]" => token::Token::RBracket,
        "{" => token::Token::LBrace,
        "}" => token::Token::RBrace,
    }
}
